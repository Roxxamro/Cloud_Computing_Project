name: Cloud_Computing_Project

on:
  pull_request:
    branches: [ "main", "dev" ]
    types: [opened, synchronize]
  push:
    branches:
      - main

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

permissions:
  contents: read
  packages: write

jobs:
  check_service:
    # Ce job s'exécute pour chaque pull request ou push sur les branches 'main' et dev.
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main' 
    runs-on: ubuntu-latest
    steps:
      # Étape 1 : Télécharger le dépôt
      - uses: actions/checkout@v3

      # Étape 2 : Configurer Python
      - uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      # Étape 3 : Vérifier que UV fonctionne correctement
      - run: uv --version

      # Étape 5 : Synchroniser les dépendances
      - name: Install dependencies
        run: uv sync

      # Étape 6 : Construire le projet
      - name: Build Project
        run: uv build

      # Étape 7 : Exécuter les tests unitaires
      - name: Running unit tests
        run: uv run pytest tests/

  build_docker_image:
    # Ce job s'exécute uniquement sur un push dans la branche 'main'.
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      # Étape 1 : Télécharger le dépôt
      - name: Checkout repository
        uses: actions/checkout@v3

      # Étape 2 : Se connecter au registre GitHub Container Registry
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Étape 3 : Extraire les métadonnées pour les tags et labels Docker
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha
            type=raw,value=latest

      # Étape 4 : Construire et publier l'image Docker
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  # crédit : Louis SKRZYPCZAK pour la partie ci-dessous
  deploy_application:
    name: Deploy application with Terraform
    needs: build_docker_image
    runs-on: ubuntu-latest
    steps:
              - name: Checkout repository
                uses: actions/checkout@v3
        
              - name: Login to Azure
                uses: azure/login@v1
                with: 
                  creds: ${{ secrets.AZURE_CREDENTIALS }}
        
              - name: Validate Azure Credentials
                run: |
                  echo "Checking AZURE_CREDENTIALS"
                  echo "Extracted AZURE_CLIENT_ID=$(echo '${{ secrets.AZURE_CREDENTIALS }}' | jq -r '.clientId')"
                  echo "Extracted AZURE_SUBSCRIPTION_ID=$(echo '${{ secrets.AZURE_CREDENTIALS }}' | jq -r '.subscriptionId')"
                  echo "Extracted AZURE_TENANT_ID=$(echo '${{ secrets.AZURE_CREDENTIALS }}' | jq -r '.tenantId')"
        
              - name: Assign necessary permissions
                run: |
                  az role assignment create \
                    --assignee $(echo '${{ secrets.AZURE_CREDENTIALS }}' | jq -r '.clientId') \
                    --role "Owner" \
                    --scope /subscriptions/$(echo '${{ secrets.AZURE_CREDENTIALS }}' | jq -r '.subscriptionId')
        
              - name: Setup Terraform
                uses: hashicorp/setup-terraform@v2
                with:
                  terraform_version: 1.9.8
        
              - name: Convert image name to lowercase
                run: echo "DOCKER_IMAGE=${{ env.REGISTRY }}/$(echo '${{ env.IMAGE_NAME }}' | tr '[:upper:]' '[:lower:]'):latest" >> $GITHUB_ENV
        
              - name: Initialize Terraform
                working-directory: ./infrastructure
                run: terraform init
        
              - name: Validate Terraform configuration
                working-directory: ./infrastructure
                run: terraform validate
        
              - name: Plan Terraform changes
                working-directory: ./infrastructure
                run: terraform plan -var "docker_image=$DOCKER_IMAGE"
        
              - name: Apply Terraform changes
                working-directory: ./infrastructure
                run: terraform apply -auto-approve -var "docker_image=$DOCKER_IMAGE"
        